#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AA_MAYET_222001975_IFM2B_P01_2024
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertACTOR(ACTOR instance);
    partial void UpdateACTOR(ACTOR instance);
    partial void DeleteACTOR(ACTOR instance);
    partial void InsertARTIST(ARTIST instance);
    partial void UpdateARTIST(ARTIST instance);
    partial void DeleteARTIST(ARTIST instance);
    partial void InsertDANCER(DANCER instance);
    partial void UpdateDANCER(DANCER instance);
    partial void DeleteDANCER(DANCER instance);
    partial void InsertMUSICIAN(MUSICIAN instance);
    partial void UpdateMUSICIAN(MUSICIAN instance);
    partial void DeleteMUSICIAN(MUSICIAN instance);
    partial void InsertTHEATER(THEATER instance);
    partial void UpdateTHEATER(THEATER instance);
    partial void DeleteTHEATER(THEATER instance);
    partial void InsertALBUM(ALBUM instance);
    partial void UpdateALBUM(ALBUM instance);
    partial void DeleteALBUM(ALBUM instance);
    partial void InsertBRIDGE(BRIDGE instance);
    partial void UpdateBRIDGE(BRIDGE instance);
    partial void DeleteBRIDGE(BRIDGE instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Database1ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ACTOR> ACTORs
		{
			get
			{
				return this.GetTable<ACTOR>();
			}
		}
		
		public System.Data.Linq.Table<ARTIST> ARTISTs
		{
			get
			{
				return this.GetTable<ARTIST>();
			}
		}
		
		public System.Data.Linq.Table<DANCER> DANCERs
		{
			get
			{
				return this.GetTable<DANCER>();
			}
		}
		
		public System.Data.Linq.Table<MUSICIAN> MUSICIANs
		{
			get
			{
				return this.GetTable<MUSICIAN>();
			}
		}
		
		public System.Data.Linq.Table<THEATER> THEATERs
		{
			get
			{
				return this.GetTable<THEATER>();
			}
		}
		
		public System.Data.Linq.Table<ALBUM> ALBUMs
		{
			get
			{
				return this.GetTable<ALBUM>();
			}
		}
		
		public System.Data.Linq.Table<BRIDGE> BRIDGEs
		{
			get
			{
				return this.GetTable<BRIDGE>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ACTOR")]
	public partial class ACTOR : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ACT_ID;
		
		private string _ACT_HAIRCOLOR;
		
		private string _ACT_EXP;
		
		private int _A_ID;
		
		private EntityRef<ARTIST> _ARTIST;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACT_IDChanging(int value);
    partial void OnACT_IDChanged();
    partial void OnACT_HAIRCOLORChanging(string value);
    partial void OnACT_HAIRCOLORChanged();
    partial void OnACT_EXPChanging(string value);
    partial void OnACT_EXPChanged();
    partial void OnA_IDChanging(int value);
    partial void OnA_IDChanged();
    #endregion
		
		public ACTOR()
		{
			this._ARTIST = default(EntityRef<ARTIST>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACT_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ACT_ID
		{
			get
			{
				return this._ACT_ID;
			}
			set
			{
				if ((this._ACT_ID != value))
				{
					this.OnACT_IDChanging(value);
					this.SendPropertyChanging();
					this._ACT_ID = value;
					this.SendPropertyChanged("ACT_ID");
					this.OnACT_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACT_HAIRCOLOR", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ACT_HAIRCOLOR
		{
			get
			{
				return this._ACT_HAIRCOLOR;
			}
			set
			{
				if ((this._ACT_HAIRCOLOR != value))
				{
					this.OnACT_HAIRCOLORChanging(value);
					this.SendPropertyChanging();
					this._ACT_HAIRCOLOR = value;
					this.SendPropertyChanged("ACT_HAIRCOLOR");
					this.OnACT_HAIRCOLORChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACT_EXP", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ACT_EXP
		{
			get
			{
				return this._ACT_EXP;
			}
			set
			{
				if ((this._ACT_EXP != value))
				{
					this.OnACT_EXPChanging(value);
					this.SendPropertyChanging();
					this._ACT_EXP = value;
					this.SendPropertyChanged("ACT_EXP");
					this.OnACT_EXPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A_ID", DbType="Int NOT NULL")]
		public int A_ID
		{
			get
			{
				return this._A_ID;
			}
			set
			{
				if ((this._A_ID != value))
				{
					if (this._ARTIST.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnA_IDChanging(value);
					this.SendPropertyChanging();
					this._A_ID = value;
					this.SendPropertyChanged("A_ID");
					this.OnA_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ARTIST_ACTOR", Storage="_ARTIST", ThisKey="A_ID", OtherKey="A_ID", IsForeignKey=true)]
		public ARTIST ARTIST
		{
			get
			{
				return this._ARTIST.Entity;
			}
			set
			{
				ARTIST previousValue = this._ARTIST.Entity;
				if (((previousValue != value) 
							|| (this._ARTIST.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ARTIST.Entity = null;
						previousValue.ACTORs.Remove(this);
					}
					this._ARTIST.Entity = value;
					if ((value != null))
					{
						value.ACTORs.Add(this);
						this._A_ID = value.A_ID;
					}
					else
					{
						this._A_ID = default(int);
					}
					this.SendPropertyChanged("ARTIST");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ARTIST")]
	public partial class ARTIST : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _A_ID;
		
		private string _A_FIRSTNAME;
		
		private string _A_LASTNAME;
		
		private int _T_NAME;
		
		private EntitySet<ACTOR> _ACTORs;
		
		private EntitySet<DANCER> _DANCERs;
		
		private EntitySet<MUSICIAN> _MUSICIANs;
		
		private EntityRef<THEATER> _THEATER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnA_IDChanging(int value);
    partial void OnA_IDChanged();
    partial void OnA_FIRSTNAMEChanging(string value);
    partial void OnA_FIRSTNAMEChanged();
    partial void OnA_LASTNAMEChanging(string value);
    partial void OnA_LASTNAMEChanged();
    partial void OnT_NAMEChanging(int value);
    partial void OnT_NAMEChanged();
    #endregion
		
		public ARTIST()
		{
			this._ACTORs = new EntitySet<ACTOR>(new Action<ACTOR>(this.attach_ACTORs), new Action<ACTOR>(this.detach_ACTORs));
			this._DANCERs = new EntitySet<DANCER>(new Action<DANCER>(this.attach_DANCERs), new Action<DANCER>(this.detach_DANCERs));
			this._MUSICIANs = new EntitySet<MUSICIAN>(new Action<MUSICIAN>(this.attach_MUSICIANs), new Action<MUSICIAN>(this.detach_MUSICIANs));
			this._THEATER = default(EntityRef<THEATER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int A_ID
		{
			get
			{
				return this._A_ID;
			}
			set
			{
				if ((this._A_ID != value))
				{
					this.OnA_IDChanging(value);
					this.SendPropertyChanging();
					this._A_ID = value;
					this.SendPropertyChanged("A_ID");
					this.OnA_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A_FIRSTNAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string A_FIRSTNAME
		{
			get
			{
				return this._A_FIRSTNAME;
			}
			set
			{
				if ((this._A_FIRSTNAME != value))
				{
					this.OnA_FIRSTNAMEChanging(value);
					this.SendPropertyChanging();
					this._A_FIRSTNAME = value;
					this.SendPropertyChanged("A_FIRSTNAME");
					this.OnA_FIRSTNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A_LASTNAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string A_LASTNAME
		{
			get
			{
				return this._A_LASTNAME;
			}
			set
			{
				if ((this._A_LASTNAME != value))
				{
					this.OnA_LASTNAMEChanging(value);
					this.SendPropertyChanging();
					this._A_LASTNAME = value;
					this.SendPropertyChanged("A_LASTNAME");
					this.OnA_LASTNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_T_NAME", DbType="Int NOT NULL")]
		public int T_NAME
		{
			get
			{
				return this._T_NAME;
			}
			set
			{
				if ((this._T_NAME != value))
				{
					if (this._THEATER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnT_NAMEChanging(value);
					this.SendPropertyChanging();
					this._T_NAME = value;
					this.SendPropertyChanged("T_NAME");
					this.OnT_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ARTIST_ACTOR", Storage="_ACTORs", ThisKey="A_ID", OtherKey="A_ID")]
		public EntitySet<ACTOR> ACTORs
		{
			get
			{
				return this._ACTORs;
			}
			set
			{
				this._ACTORs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ARTIST_DANCER", Storage="_DANCERs", ThisKey="A_ID", OtherKey="A_ID")]
		public EntitySet<DANCER> DANCERs
		{
			get
			{
				return this._DANCERs;
			}
			set
			{
				this._DANCERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ARTIST_MUSICIAN", Storage="_MUSICIANs", ThisKey="A_ID", OtherKey="A_ID")]
		public EntitySet<MUSICIAN> MUSICIANs
		{
			get
			{
				return this._MUSICIANs;
			}
			set
			{
				this._MUSICIANs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="THEATER_ARTIST", Storage="_THEATER", ThisKey="T_NAME", OtherKey="T_NAME", IsForeignKey=true)]
		public THEATER THEATER
		{
			get
			{
				return this._THEATER.Entity;
			}
			set
			{
				THEATER previousValue = this._THEATER.Entity;
				if (((previousValue != value) 
							|| (this._THEATER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._THEATER.Entity = null;
						previousValue.ARTISTs.Remove(this);
					}
					this._THEATER.Entity = value;
					if ((value != null))
					{
						value.ARTISTs.Add(this);
						this._T_NAME = value.T_NAME;
					}
					else
					{
						this._T_NAME = default(int);
					}
					this.SendPropertyChanged("THEATER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ACTORs(ACTOR entity)
		{
			this.SendPropertyChanging();
			entity.ARTIST = this;
		}
		
		private void detach_ACTORs(ACTOR entity)
		{
			this.SendPropertyChanging();
			entity.ARTIST = null;
		}
		
		private void attach_DANCERs(DANCER entity)
		{
			this.SendPropertyChanging();
			entity.ARTIST = this;
		}
		
		private void detach_DANCERs(DANCER entity)
		{
			this.SendPropertyChanging();
			entity.ARTIST = null;
		}
		
		private void attach_MUSICIANs(MUSICIAN entity)
		{
			this.SendPropertyChanging();
			entity.ARTIST = this;
		}
		
		private void detach_MUSICIANs(MUSICIAN entity)
		{
			this.SendPropertyChanging();
			entity.ARTIST = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DANCER")]
	public partial class DANCER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _D_ID;
		
		private string _D_STYLE;
		
		private string _D_HEIGHT;
		
		private int _A_ID;
		
		private EntityRef<ARTIST> _ARTIST;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnD_IDChanging(int value);
    partial void OnD_IDChanged();
    partial void OnD_STYLEChanging(string value);
    partial void OnD_STYLEChanged();
    partial void OnD_HEIGHTChanging(string value);
    partial void OnD_HEIGHTChanged();
    partial void OnA_IDChanging(int value);
    partial void OnA_IDChanged();
    #endregion
		
		public DANCER()
		{
			this._ARTIST = default(EntityRef<ARTIST>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_D_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int D_ID
		{
			get
			{
				return this._D_ID;
			}
			set
			{
				if ((this._D_ID != value))
				{
					this.OnD_IDChanging(value);
					this.SendPropertyChanging();
					this._D_ID = value;
					this.SendPropertyChanged("D_ID");
					this.OnD_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_D_STYLE", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string D_STYLE
		{
			get
			{
				return this._D_STYLE;
			}
			set
			{
				if ((this._D_STYLE != value))
				{
					this.OnD_STYLEChanging(value);
					this.SendPropertyChanging();
					this._D_STYLE = value;
					this.SendPropertyChanged("D_STYLE");
					this.OnD_STYLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_D_HEIGHT", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string D_HEIGHT
		{
			get
			{
				return this._D_HEIGHT;
			}
			set
			{
				if ((this._D_HEIGHT != value))
				{
					this.OnD_HEIGHTChanging(value);
					this.SendPropertyChanging();
					this._D_HEIGHT = value;
					this.SendPropertyChanged("D_HEIGHT");
					this.OnD_HEIGHTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A_ID", DbType="Int NOT NULL")]
		public int A_ID
		{
			get
			{
				return this._A_ID;
			}
			set
			{
				if ((this._A_ID != value))
				{
					if (this._ARTIST.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnA_IDChanging(value);
					this.SendPropertyChanging();
					this._A_ID = value;
					this.SendPropertyChanged("A_ID");
					this.OnA_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ARTIST_DANCER", Storage="_ARTIST", ThisKey="A_ID", OtherKey="A_ID", IsForeignKey=true)]
		public ARTIST ARTIST
		{
			get
			{
				return this._ARTIST.Entity;
			}
			set
			{
				ARTIST previousValue = this._ARTIST.Entity;
				if (((previousValue != value) 
							|| (this._ARTIST.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ARTIST.Entity = null;
						previousValue.DANCERs.Remove(this);
					}
					this._ARTIST.Entity = value;
					if ((value != null))
					{
						value.DANCERs.Add(this);
						this._A_ID = value.A_ID;
					}
					else
					{
						this._A_ID = default(int);
					}
					this.SendPropertyChanged("ARTIST");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MUSICIAN")]
	public partial class MUSICIAN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _M_ID;
		
		private string _M_INSTRUMENT;
		
		private string _M_GENRE;
		
		private int _A_ID;
		
		private EntitySet<BRIDGE> _BRIDGEs;
		
		private EntityRef<ARTIST> _ARTIST;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnM_IDChanging(int value);
    partial void OnM_IDChanged();
    partial void OnM_INSTRUMENTChanging(string value);
    partial void OnM_INSTRUMENTChanged();
    partial void OnM_GENREChanging(string value);
    partial void OnM_GENREChanged();
    partial void OnA_IDChanging(int value);
    partial void OnA_IDChanged();
    #endregion
		
		public MUSICIAN()
		{
			this._BRIDGEs = new EntitySet<BRIDGE>(new Action<BRIDGE>(this.attach_BRIDGEs), new Action<BRIDGE>(this.detach_BRIDGEs));
			this._ARTIST = default(EntityRef<ARTIST>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int M_ID
		{
			get
			{
				return this._M_ID;
			}
			set
			{
				if ((this._M_ID != value))
				{
					this.OnM_IDChanging(value);
					this.SendPropertyChanging();
					this._M_ID = value;
					this.SendPropertyChanged("M_ID");
					this.OnM_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_INSTRUMENT", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string M_INSTRUMENT
		{
			get
			{
				return this._M_INSTRUMENT;
			}
			set
			{
				if ((this._M_INSTRUMENT != value))
				{
					this.OnM_INSTRUMENTChanging(value);
					this.SendPropertyChanging();
					this._M_INSTRUMENT = value;
					this.SendPropertyChanged("M_INSTRUMENT");
					this.OnM_INSTRUMENTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_GENRE", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string M_GENRE
		{
			get
			{
				return this._M_GENRE;
			}
			set
			{
				if ((this._M_GENRE != value))
				{
					this.OnM_GENREChanging(value);
					this.SendPropertyChanging();
					this._M_GENRE = value;
					this.SendPropertyChanged("M_GENRE");
					this.OnM_GENREChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A_ID", DbType="Int NOT NULL")]
		public int A_ID
		{
			get
			{
				return this._A_ID;
			}
			set
			{
				if ((this._A_ID != value))
				{
					if (this._ARTIST.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnA_IDChanging(value);
					this.SendPropertyChanging();
					this._A_ID = value;
					this.SendPropertyChanged("A_ID");
					this.OnA_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MUSICIAN_BRIDGE", Storage="_BRIDGEs", ThisKey="M_ID", OtherKey="M_ID")]
		public EntitySet<BRIDGE> BRIDGEs
		{
			get
			{
				return this._BRIDGEs;
			}
			set
			{
				this._BRIDGEs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ARTIST_MUSICIAN", Storage="_ARTIST", ThisKey="A_ID", OtherKey="A_ID", IsForeignKey=true)]
		public ARTIST ARTIST
		{
			get
			{
				return this._ARTIST.Entity;
			}
			set
			{
				ARTIST previousValue = this._ARTIST.Entity;
				if (((previousValue != value) 
							|| (this._ARTIST.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ARTIST.Entity = null;
						previousValue.MUSICIANs.Remove(this);
					}
					this._ARTIST.Entity = value;
					if ((value != null))
					{
						value.MUSICIANs.Add(this);
						this._A_ID = value.A_ID;
					}
					else
					{
						this._A_ID = default(int);
					}
					this.SendPropertyChanged("ARTIST");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BRIDGEs(BRIDGE entity)
		{
			this.SendPropertyChanging();
			entity.MUSICIAN = this;
		}
		
		private void detach_BRIDGEs(BRIDGE entity)
		{
			this.SendPropertyChanging();
			entity.MUSICIAN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.THEATER")]
	public partial class THEATER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _T_NAME;
		
		private string _T_CITY;
		
		private int _T_CAPICITY;
		
		private EntitySet<ARTIST> _ARTISTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnT_NAMEChanging(int value);
    partial void OnT_NAMEChanged();
    partial void OnT_CITYChanging(string value);
    partial void OnT_CITYChanged();
    partial void OnT_CAPICITYChanging(int value);
    partial void OnT_CAPICITYChanged();
    #endregion
		
		public THEATER()
		{
			this._ARTISTs = new EntitySet<ARTIST>(new Action<ARTIST>(this.attach_ARTISTs), new Action<ARTIST>(this.detach_ARTISTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_T_NAME", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int T_NAME
		{
			get
			{
				return this._T_NAME;
			}
			set
			{
				if ((this._T_NAME != value))
				{
					this.OnT_NAMEChanging(value);
					this.SendPropertyChanging();
					this._T_NAME = value;
					this.SendPropertyChanged("T_NAME");
					this.OnT_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_T_CITY", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string T_CITY
		{
			get
			{
				return this._T_CITY;
			}
			set
			{
				if ((this._T_CITY != value))
				{
					this.OnT_CITYChanging(value);
					this.SendPropertyChanging();
					this._T_CITY = value;
					this.SendPropertyChanged("T_CITY");
					this.OnT_CITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_T_CAPICITY", DbType="Int NOT NULL")]
		public int T_CAPICITY
		{
			get
			{
				return this._T_CAPICITY;
			}
			set
			{
				if ((this._T_CAPICITY != value))
				{
					this.OnT_CAPICITYChanging(value);
					this.SendPropertyChanging();
					this._T_CAPICITY = value;
					this.SendPropertyChanged("T_CAPICITY");
					this.OnT_CAPICITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="THEATER_ARTIST", Storage="_ARTISTs", ThisKey="T_NAME", OtherKey="T_NAME")]
		public EntitySet<ARTIST> ARTISTs
		{
			get
			{
				return this._ARTISTs;
			}
			set
			{
				this._ARTISTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ARTISTs(ARTIST entity)
		{
			this.SendPropertyChanging();
			entity.THEATER = this;
		}
		
		private void detach_ARTISTs(ARTIST entity)
		{
			this.SendPropertyChanging();
			entity.THEATER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ALBUM")]
	public partial class ALBUM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ALB_ID;
		
		private System.DateTime _ALB_DATE;
		
		private string _ALB_TITLE;
		
		private int _ALB_NUMBTRACKS;
		
		private string _ALB_PRICE;
		
		private EntitySet<BRIDGE> _BRIDGEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnALB_IDChanging(int value);
    partial void OnALB_IDChanged();
    partial void OnALB_DATEChanging(System.DateTime value);
    partial void OnALB_DATEChanged();
    partial void OnALB_TITLEChanging(string value);
    partial void OnALB_TITLEChanged();
    partial void OnALB_NUMBTRACKSChanging(int value);
    partial void OnALB_NUMBTRACKSChanged();
    partial void OnALB_PRICEChanging(string value);
    partial void OnALB_PRICEChanged();
    #endregion
		
		public ALBUM()
		{
			this._BRIDGEs = new EntitySet<BRIDGE>(new Action<BRIDGE>(this.attach_BRIDGEs), new Action<BRIDGE>(this.detach_BRIDGEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ALB_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ALB_ID
		{
			get
			{
				return this._ALB_ID;
			}
			set
			{
				if ((this._ALB_ID != value))
				{
					this.OnALB_IDChanging(value);
					this.SendPropertyChanging();
					this._ALB_ID = value;
					this.SendPropertyChanged("ALB_ID");
					this.OnALB_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ALB_DATE", DbType="Date NOT NULL")]
		public System.DateTime ALB_DATE
		{
			get
			{
				return this._ALB_DATE;
			}
			set
			{
				if ((this._ALB_DATE != value))
				{
					this.OnALB_DATEChanging(value);
					this.SendPropertyChanging();
					this._ALB_DATE = value;
					this.SendPropertyChanged("ALB_DATE");
					this.OnALB_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ALB_TITLE", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ALB_TITLE
		{
			get
			{
				return this._ALB_TITLE;
			}
			set
			{
				if ((this._ALB_TITLE != value))
				{
					this.OnALB_TITLEChanging(value);
					this.SendPropertyChanging();
					this._ALB_TITLE = value;
					this.SendPropertyChanged("ALB_TITLE");
					this.OnALB_TITLEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ALB_NUMBTRACKS", DbType="Int NOT NULL")]
		public int ALB_NUMBTRACKS
		{
			get
			{
				return this._ALB_NUMBTRACKS;
			}
			set
			{
				if ((this._ALB_NUMBTRACKS != value))
				{
					this.OnALB_NUMBTRACKSChanging(value);
					this.SendPropertyChanging();
					this._ALB_NUMBTRACKS = value;
					this.SendPropertyChanged("ALB_NUMBTRACKS");
					this.OnALB_NUMBTRACKSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ALB_PRICE", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ALB_PRICE
		{
			get
			{
				return this._ALB_PRICE;
			}
			set
			{
				if ((this._ALB_PRICE != value))
				{
					this.OnALB_PRICEChanging(value);
					this.SendPropertyChanging();
					this._ALB_PRICE = value;
					this.SendPropertyChanged("ALB_PRICE");
					this.OnALB_PRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ALBUM_BRIDGE", Storage="_BRIDGEs", ThisKey="ALB_ID", OtherKey="ALB_ID")]
		public EntitySet<BRIDGE> BRIDGEs
		{
			get
			{
				return this._BRIDGEs;
			}
			set
			{
				this._BRIDGEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BRIDGEs(BRIDGE entity)
		{
			this.SendPropertyChanging();
			entity.ALBUM = this;
		}
		
		private void detach_BRIDGEs(BRIDGE entity)
		{
			this.SendPropertyChanging();
			entity.ALBUM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BRIDGE")]
	public partial class BRIDGE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _M_ID;
		
		private int _ALB_ID;
		
		private EntityRef<ALBUM> _ALBUM;
		
		private EntityRef<MUSICIAN> _MUSICIAN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnM_IDChanging(int value);
    partial void OnM_IDChanged();
    partial void OnALB_IDChanging(int value);
    partial void OnALB_IDChanged();
    #endregion
		
		public BRIDGE()
		{
			this._ALBUM = default(EntityRef<ALBUM>);
			this._MUSICIAN = default(EntityRef<MUSICIAN>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_M_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int M_ID
		{
			get
			{
				return this._M_ID;
			}
			set
			{
				if ((this._M_ID != value))
				{
					if (this._MUSICIAN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnM_IDChanging(value);
					this.SendPropertyChanging();
					this._M_ID = value;
					this.SendPropertyChanged("M_ID");
					this.OnM_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ALB_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ALB_ID
		{
			get
			{
				return this._ALB_ID;
			}
			set
			{
				if ((this._ALB_ID != value))
				{
					if (this._ALBUM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnALB_IDChanging(value);
					this.SendPropertyChanging();
					this._ALB_ID = value;
					this.SendPropertyChanged("ALB_ID");
					this.OnALB_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ALBUM_BRIDGE", Storage="_ALBUM", ThisKey="ALB_ID", OtherKey="ALB_ID", IsForeignKey=true)]
		public ALBUM ALBUM
		{
			get
			{
				return this._ALBUM.Entity;
			}
			set
			{
				ALBUM previousValue = this._ALBUM.Entity;
				if (((previousValue != value) 
							|| (this._ALBUM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ALBUM.Entity = null;
						previousValue.BRIDGEs.Remove(this);
					}
					this._ALBUM.Entity = value;
					if ((value != null))
					{
						value.BRIDGEs.Add(this);
						this._ALB_ID = value.ALB_ID;
					}
					else
					{
						this._ALB_ID = default(int);
					}
					this.SendPropertyChanged("ALBUM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MUSICIAN_BRIDGE", Storage="_MUSICIAN", ThisKey="M_ID", OtherKey="M_ID", IsForeignKey=true)]
		public MUSICIAN MUSICIAN
		{
			get
			{
				return this._MUSICIAN.Entity;
			}
			set
			{
				MUSICIAN previousValue = this._MUSICIAN.Entity;
				if (((previousValue != value) 
							|| (this._MUSICIAN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MUSICIAN.Entity = null;
						previousValue.BRIDGEs.Remove(this);
					}
					this._MUSICIAN.Entity = value;
					if ((value != null))
					{
						value.BRIDGEs.Add(this);
						this._M_ID = value.M_ID;
					}
					else
					{
						this._M_ID = default(int);
					}
					this.SendPropertyChanged("MUSICIAN");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
